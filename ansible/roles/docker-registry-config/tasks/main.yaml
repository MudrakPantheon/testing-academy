---
# We need to tell Docker daemon that the registry it is trying to access is insecure
- name: "Add insecure-registries entry to daemon.json config file"
  ansible.builtin.replace:
    path: "/etc/docker/daemon.json"
    regexp: ' } '
    replace: ', "insecure-registries": ["192.168.56.11:5000", "docker.registry.com:5000"] }'

- name: "Add insecure registry entry to containerd config file"
  ansible.builtin.lineinfile:
    path: "/etc/containerd/config.toml"
    regexp: 'config_path = ""'
    line: '      config_path = "/etc/containerd/certs.d"'
    state: "present"

# Add entry to /etc/hosts
- name: "Pasting docker.registry.com entry to /etc/hosts"
  ansible.builtin.lineinfile:
    state: "present"
    dest: "/etc/hosts"
    line: "192.168.56.11 docker.registry.com"

# This way we can trick docker to think that our certificates arent really self-signed
- name: "Create directories for copying certificates"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    recurse: "true"
    mode: "0744"
  with_items:
    - "/etc/docker/certs.d/docker.registry.com:5000/"
    - "/etc/containerd/certs.d/docker.registry.com:5000/"

- name: "Copy certificates to docker certs.d"
  ansible.builtin.copy:
    src: "/vagrant/certs/registry.crt"
    dest: "/etc/docker/certs.d/docker.registry.com:5000/ca.crt"
    mode: "0744"

- name: "Copy certificates to containerd certs.d"
  ansible.builtin.copy:
    src: "/vagrant/certs/hosts.toml"
    dest: "/etc/containerd/certs.d/docker.registry.com:5000/hosts.toml"
    mode: "0744"

# Restart docker and containerd to apply changes
- name: "Restart docker and containerd, also do daemon-reload"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "restarted"
  with_items:
    - "docker"
    - "containerd"
